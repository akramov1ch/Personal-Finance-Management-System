// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: protos/reporting/reporting.proto

package reporting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ReportingService_GetIncomeExpenseReport_FullMethodName      = "/ReportingService/GetIncomeExpenseReport"
	ReportingService_GetSpendingByCategoryReport_FullMethodName = "/ReportingService/GetSpendingByCategoryReport"
)

// ReportingServiceClient is the client API for ReportingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportingServiceClient interface {
	GetIncomeExpenseReport(ctx context.Context, in *GetIncomeExpenseReportRequest, opts ...grpc.CallOption) (*IncomeExpenseReportResponse, error)
	GetSpendingByCategoryReport(ctx context.Context, in *GetSpendingByCategoryReportRequest, opts ...grpc.CallOption) (*SpendingByCategoryReportResponse, error)
}

type reportingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportingServiceClient(cc grpc.ClientConnInterface) ReportingServiceClient {
	return &reportingServiceClient{cc}
}

func (c *reportingServiceClient) GetIncomeExpenseReport(ctx context.Context, in *GetIncomeExpenseReportRequest, opts ...grpc.CallOption) (*IncomeExpenseReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncomeExpenseReportResponse)
	err := c.cc.Invoke(ctx, ReportingService_GetIncomeExpenseReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) GetSpendingByCategoryReport(ctx context.Context, in *GetSpendingByCategoryReportRequest, opts ...grpc.CallOption) (*SpendingByCategoryReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpendingByCategoryReportResponse)
	err := c.cc.Invoke(ctx, ReportingService_GetSpendingByCategoryReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportingServiceServer is the server API for ReportingService service.
// All implementations must embed UnimplementedReportingServiceServer
// for forward compatibility
type ReportingServiceServer interface {
	GetIncomeExpenseReport(context.Context, *GetIncomeExpenseReportRequest) (*IncomeExpenseReportResponse, error)
	GetSpendingByCategoryReport(context.Context, *GetSpendingByCategoryReportRequest) (*SpendingByCategoryReportResponse, error)
	mustEmbedUnimplementedReportingServiceServer()
}

// UnimplementedReportingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReportingServiceServer struct {
}

func (UnimplementedReportingServiceServer) GetIncomeExpenseReport(context.Context, *GetIncomeExpenseReportRequest) (*IncomeExpenseReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomeExpenseReport not implemented")
}
func (UnimplementedReportingServiceServer) GetSpendingByCategoryReport(context.Context, *GetSpendingByCategoryReportRequest) (*SpendingByCategoryReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendingByCategoryReport not implemented")
}
func (UnimplementedReportingServiceServer) mustEmbedUnimplementedReportingServiceServer() {}

// UnsafeReportingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportingServiceServer will
// result in compilation errors.
type UnsafeReportingServiceServer interface {
	mustEmbedUnimplementedReportingServiceServer()
}

func RegisterReportingServiceServer(s grpc.ServiceRegistrar, srv ReportingServiceServer) {
	s.RegisterService(&ReportingService_ServiceDesc, srv)
}

func _ReportingService_GetIncomeExpenseReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncomeExpenseReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).GetIncomeExpenseReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingService_GetIncomeExpenseReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).GetIncomeExpenseReport(ctx, req.(*GetIncomeExpenseReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_GetSpendingByCategoryReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpendingByCategoryReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).GetSpendingByCategoryReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingService_GetSpendingByCategoryReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).GetSpendingByCategoryReport(ctx, req.(*GetSpendingByCategoryReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportingService_ServiceDesc is the grpc.ServiceDesc for ReportingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReportingService",
	HandlerType: (*ReportingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIncomeExpenseReport",
			Handler:    _ReportingService_GetIncomeExpenseReport_Handler,
		},
		{
			MethodName: "GetSpendingByCategoryReport",
			Handler:    _ReportingService_GetSpendingByCategoryReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/reporting/reporting.proto",
}
